#!/usr/bin/env bash
set -e

if [ "$(uname -r | sed -n 's/.*\( *Microsoft *\).*/\1/p')" = "Microsoft"  ]; then
  WSL=true
else
  WSL=false
fi

if cat /etc/issue | grep "Debian" >/dev/null 2>&1; then
  DISTRO="Debian"
elif cat /etc/issue | grep "Ubuntu" >/dev/null 2>&1; then
  DISTRO="Ubuntu"
fi

# Disable sudo prompt
echo "Disabling prompt for sudo"
if ! sudo grep -q "%sudo[[:space:]]ALL=(ALL:ALL) NOPASSWD:ALL" /etc/sudoers >/dev/null 2>&1
then
  echo "%sudo ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers >/dev/null 2>&1 || echo "Failed to edit sudoers file"
fi

sudo apt-get -qq -y update && sudo apt-get -y upgrade || echo "Failed to apt-update/apt-upgrade"
sudo apt-get -y install cmake autoconf libtool libtool-bin pkg-config m4 software-properties-common libncurses5-dev >/dev/null 2>&1
sudo apt-get -y install build-essential qt5-default libqt5webkit5-dev python-dev python3-dev python-pip python3-pip >/dev/null 2>&1

# Debian pre-reqs
if [ "$DISTRO" = "Debian" ]; then
  # Add contrib and non-free sources
  echo "Adding contrib and non-free to debian sources.list"
  sudo sed -i "/.*contrib.*/b; s/deb .*debian.org.*main.*/& contrib/" /etc/apt/sources.list
  sudo sed -i "/.*non-free.*/b; s/deb .*debian.org.*main.*/& non-free/" /etc/apt/sources.list

  # Install packages required for this script
  echo "Installing Debian pre-reqs"
  sudo apt-get -y install curl man >/dev/null 2>&1 || echo "Failed to install pre-reqs"
  sudo apt-get -y install dirmngr --install-recommends >/dev/null 2>&1 || echo "Failed to install pre-reqs"
fi

# Neovim
echo "Checking out NeoVim"
mkdir -p ~/git && pushd ~/git >/dev/null 2>&1
git clone https://github.com/neovim/neovim.git && cd neovim

echo "Building and installing NeoVim"
make >/dev/null 2>&1 || "Failed to build NeoVim"
sudo make install >/dev/null 2>&1 || "Failed to install NeoVim"
popd >/dev/null 2>&1

# NodeJS Repo
echo "Adding repo for NodeJS"
curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash - >/dev/null 2>&1 || echo "Failed to add NodeJS repo"

# Yarn Repo
echo "Adding repo for Yarn"
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - >/dev/null 2>&1 || echo "Failed to add Yarn GPG key"
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list >/dev/null 2>&1 || echo "Failed to add yarn repo"

# Keybase
echo "Installing Keybase"
TEMP_KBS="$(mktemp -d)"
wget -O "$TEMP_KBS/keybase_amd64.deb" "https://prerelease.keybase.io/keybase_amd64.deb" >/dev/null 2>&1 || echo "Failed to download keybase"
sudo apt-get -y install "$TEMP_KBS/keybase_amd64.deb" >/dev/null 2>&1 || echo "Failed to install Keybase"
sudo apt-get -y install -f >/dev/null 2>&1 || echo "Failed to install Keybase deps"
run_keybase > /dev/null 2>&1 || echo "Failed to start Keybase"
rm -rf "$TEMP_KBS"

# Erlang Repo
echo "Installing Erlang"
TEMP_ERL="$(mktemp -d)"
wget -O "$TEMP_ERL/erlang_all.deb" "https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb" >/dev/null 2>&1 || echo "Failed to download Erlang"
sudo apt-get -y install "$TEMP_ERL/erlang_all.deb" >/dev/null 2>&1 || echo "Failed to install Erlang"
rm -rf "$TEMP_ERL"

echo "Installing RipGrep"
TEMP_RG="$(mktemp -d)"
wget -O "$TEMP_RG/ripgrep.deb" "https://github.com/BurntSushi/ripgrep/releases/download/0.8.1/ripgrep_0.8.1_amd64.deb" >/dev/null 2>&1 || echo "Failed to download RipGrep"
sudo apt-get -y install "$TEMP_RG/ripgrep.deb" >/dev/null 2>&1 || echo "Failed to install RipGrep"
rm -rf "$TEMP_RG"

# Update apt sources
echo "Updating apt sources"
sudo apt-get -qq -y update

# Get package list to install
echo "Getting packages to install"
PKG_ALL=`echo "$a" | sed '/^||ALL||$/,/^||ENDALL||$/!d;//d' packages` >/dev/null 2>&1 || echo "Failed to load universal packages to install"
PKG_APT=`echo "$a" | sed '/^||APT||$/,/^||ENDAPT||$/!d;//d' packages` >/dev/null 2>&1 || echo "Failed to load apt packages to install"
PACKAGES="$PKG_ALL $PKG_APT"

# Install packages
echo "Installing packages"
sudo apt-get -qq -y install $(echo $PACKAGES | tr '\n' ' ') >/dev/null 2>&1 || echo "Failed to install some packages"
echo "Finished installing packages"

# Start postgres if it was installed
if service --status-all 2>&1 | grep -Fq 'postgresql'
then
  echo "Allowing unauthenticated access to psql"
  echo "host    all             all              0.0.0.0/0                       md5" | sudo tee -a $(ls /etc/postgresql/*/main/pg_hba.conf) >/dev/null 2>&1
  echo "host    all             all              ::/0	                         md5" | sudo tee -a $(ls /etc/postgresql/*/main/pg_hba.conf) >/dev/null 2>&1

  sudo sed -i "s/listen_addresses = '.*'/listen_addresses = '\*'/" $(ls /etc/postgresql/*/main/postgresql.conf)
  sudo sed -i "s/port = .*/port = 5432/" $(ls /etc/postgresql/*/main/postgresql.conf)

  echo "Starting PostgresQL"
  sudo service postgresql start >/dev/null 2>&1 || echo "Failed to start PostgresQL"

  if [ "$WSL" = false ]; then
    echo "Enabling the PostgresQL service"
    sudo service postgresql enable >/dev/null 2>&1 || echo "Failed to enable the PostgresQL service"
  fi
fi

if [ "$WSL" = false ]
then
  # Chromedriver
  echo "Installing chromedriver"
  sudo apt-get -qq -y install chromium-browser chromium-chromedriver >/dev/null 2>&1 || echo "Failed to install chromedriver"
  sudo ln -s /usr/lib/chromium-browser/chromedriver /usr/bin/chromedriver >/dev/null 2>&1 || echo "Failed to symlink chromium-chromedriver to chrome-chromedriver"
else
  # WSL Helpers symlinks
  echo "Symlinking WSL specific files"
  mkdir -p ~/bin

  echo "Linking Chromedriver"
  sudo rm -rf ~/bin/chromedriver > /dev/null 2>&1
  ln -sf $PWD/dotfiles/bin/chromedriver ~/bin/chromedriver

  echo "Linking MSBuild"
  sudo rm -rf ~/bin/msbuild > /dev/null 2>&1
  ln -sf $PWD/dotfiles/bin/msbuild ~/bin/msbuild

  echo "Linking wsl-browser-bridge"
  sudo rm -rf ~/bin/wsl-browser-bridge > /dev/null 2>&1
  ln -sf $PWD/dotfiles/bin/wsl-browser-bridge ~/bin/wsl-browser-bridge

  echo "Linking wslpath"
  sudo rm -rf ~/bin/wslpath > /dev/null 2>&1
  ln -sf $PWD/dotfiles/bin/wslpath ~/bin/wslpath

  # Install stuff on the Windows-side
  echo "Installing Windows programs"
  pushd /mnt/c >/dev/null 2>&1

  cmd.exe /c "if not exist Workspace\\Tools\\Chromedriver mkdir Workspace\\Tools\\Chromedriver" >/dev/null 2>&1 || echo "Failed to create dir for Chromedriver"
  cmd.exe /c "if not exist Workspace\\Tools\\Wsltty\\bin mkdir Workspace\\Tools\\Wsltty\\bin" >/dev/null 2>&1 || echo "Failed to create dir for Wsltty"
  cd /mnt/c/Workspace/Tools

  # Pre-reqs
  sudo apt-get -y install p7zip-full p7zip-rar >/dev/null 2>&1 || echo "Failed to download 7z for extracting Windows tools"

  # Yank from Windows to NeoVim WSL
  echo "Downloading win32yank (for pasting from Windows clipboard to NeoVim WSL)"
  TEMP_WY="$(mktemp -d)"
  wget -O "$TEMP_WY/win32yank.zip" "https://github.com/equalsraf/win32yank/releases/download/v0.0.4/win32yank-x64.zip" >/dev/null 2>&1 || echo "Failed to download win32yank"
  7z e $TEMP_WY/win32yank.zip -o/mnt/c/Workspace/Tools win32yank.exe -y >/dev/null 2>&1 || echo "Failed to extract win32yank"
  
  # Symlink win32yank
  sudo rm -rf /usr/bin/win32yank
  sudo ln -s /mnt/c/Workspace/Tools/win32yank.exe /usr/bin/win32yank

  # Chromedriver
  echo "Downloading Chromedriver"
  TEMP_NGT="$(mktemp)"
  wget -O "$TEMP_NGT" "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" >/dev/null 2>&1 || echo "Failed to download nuget.exe"
  mv "$TEMP_NGT" /mnt/c/Workspace/Tools/nuget.exe || echo "Failed to move nuget.exe to Tools folder"
  cmd.exe /c "nuget.exe install Selenium.WebDriver.ChromeDriver -ExcludeVersion" >/dev/null 2>&1 || echo "Failed to download chromedriver from nuget"
  mv Selenium.WebDriver.ChromeDriver/driver/win32/chromedriver.exe Chromedriver/ || echo "Failed to move Chromedriver to Tools folder"

  # Wsltty
  echo "Installing Wsltty"
  TEMP_WSL="$(mktemp -d)"
  wget -O "$TEMP_WSL/wsltty.exe" "https://github.com/mintty/wsltty/releases/download/1.8.3.2/wsltty-1.8.3.2-install.exe" >/dev/null 2>&1 || echo "Failed to download Wsltty"
  7z e $TEMP_WSL/wsltty.exe -o/mnt/c/Workspace/Tools/Wsltty/bin cygwin1.dll cygwin-console-helper.exe mintty.exe wslbridge.exe wslbridge-backend -y >/dev/null 2>&1 || echo "Failed to extract Wsltty"

  # Cleanup
  echo "Cleaning up"
  rm -r $TEMP_WSL
  rm -r $TEMP_WY
  rm nuget.exe
  rm -r Selenium.WebDriver.ChromeDriver

  popd >/dev/null 2>&1

  echo "Copying Wsltty dotfiles to Wsltty folder"
  cp dotfiles/wsltty/* /mnt/c/Workspace/Tools/Wsltty -r

  if ( powershell.exe -Command 'Test-Path "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\wsl-terminal.lnk"' | grep "False" >/dev/null 2>&1 ); then
    echo "Creating shortcut to Wsltty on Windows Start Menu"
    powershell.exe -Command 'robocopy "C:\Workspace\Tools\Wsltty" "$env:APPDATA\Microsoft\Windows\Start Menu\Programs" wsl-terminal.lnk' >/dev/null 2>&1 || echo "Failed to copy shortcut"
    powershell.exe -Command '(New-Object -ComObject shell.application).Namespace("$env:APPDATA\Microsoft\Windows\Start Menu\Programs").parsename("wsl-terminal.lnk").invokeverb("pintostartscreen")' >/dev/null 2>&1 || echo "Failed to pin shortcut to Start Menu"
  fi
fi
