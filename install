#!/usr/bin/env bash
set -e

if [ $(id -u) != 0 ]; then
   echo "This script requires root permissions"
   sudo -v
fi

# OS-Specific
if [ "$(uname)" = "Darwin" ]; then
  # sudo chmod +x install-mac
  # ./install-mac

  echo "Script not yet supported on MacOS"
  exit 0
elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ] && [ $(which apt-get) ]; then
  sudo chmod +x install-apt
  ./install-apt
else
  echo "Script not supported on this OS/Distro"
  exit 0
fi

# Symlinks
sudo chmod +x install-symlinks
./install-symlinks

# Python
echo "Installing Python modules for NeoVim"
pip3 install --upgrade pip >/dev/null 2>&1 || echo "Failed to upgrade pip"
pip3 install neovim >/dev/null 2>&1 || echo "Failed to install neovim python plugin"

# Zplug
if [ ! -d ~/.zplug ]; then
  echo "Downloading ZPlug"
  curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh| zsh
  chmod -R 755 ~/.zplug
fi

# Make files in ~/bin executable
echo "Setting executable permissions on ~/bin folder"
chmod +x ~/bin/*

# Install Neovim plugins
echo "Installing NeoVim plugins"
nvim --headless +UpdateRemotePlugins +qall >/dev/null 2>&1
nvim --headless +PlugInstall +qall >/dev/null 2>&1

# Postgres
# Afterwards you should be able to connect using just 'psql'
echo "Setting default users and permissions for PostgresQL"
sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres'" >/dev/null 2>&1 || echo "Failed to set password for postgres user"
sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='$USER'" | grep -q 1 || sudo -u postgres psql -c "CREATE USER $USER WITH SUPERUSER" >/dev/null 2>&1
sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname = '$USER'" | grep -q 1 || sudo -u postgres psql -c "CREATE DATABASE $USER" >/dev/null 2>&1

# Asdf version manager
if [ ! -d ~/.asdf ]; then
  echo "Installing ASDF version manager 0.4.1"
  git clone https://github.com/asdf-vm/asdf.git "${HOME}/.asdf" --branch v0.4.1 >/dev/null 2>&1 || echo "Failed to clone asdf into ~/.asdf"
else
  echo "Updating ASDF version manager"
  pushd ~/.asdf >/dev/null 2>&1
  git fetch >/dev/null 2>&1 && git checkout v0.4.1 >/dev/null 2>&1 || echo "Failed to update ASDF"
  popd >/dev/null 2>&1
fi

source ~/.asdf/asdf.sh

# Node
echo "Installing Node"
asdf plugin-list | grep -q nodejs || asdf plugin-add nodejs https://github.com/asdf-vm/asdf-nodejs.git >/dev/null 2>&1 || echo "Failed to fetch ASDF node plugin"
bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring >/dev/null 2>&1 || echo "Failed to add NodeJS GPG keys to keyring"
asdf list nodejs | grep -q 8.4.0 || asdf install nodejs 8.4.0 >/dev/null 2>&1 || echo "Failed to install NodeJS"
asdf global nodejs 8.4.0 || echo "Failed to set global NodeJS version"

# Ruby
echo "Installing Ruby"
asdf plugin-list | grep -q ruby || asdf plugin-add ruby https://github.com/asdf-vm/asdf-ruby.git >/dev/null 2>&1 || echo "Failed to fetch ASDF ruby plugin"
asdf list ruby | grep -q 2.5.0 || asdf install ruby 2.5.0 >/dev/null 2>&1 || echo "Failed to install Ruby"
asdf global ruby 2.5.0 || echo "Failed to set global Ruby version"

# Elixir
echo "Installing Elixir"
asdf plugin-list | grep -q elixir || asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git >/dev/null 2>&1 || echo "Failed to fetch ASDF elixir plugin"
asdf list elixir | grep -q 1.6.2 || asdf install elixir 1.6.2 >/dev/null 2>&1 || echo "Failed to install Elixir"
asdf global elixir 1.6.2 || echo "Failed to set global Elixir version"
